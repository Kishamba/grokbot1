import os
import sys
import time
import logging
import pandas as pd
from pybit.unified_trading import HTTP, WebSocket
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, MACD
from ta.volatility import AverageTrueRange
from dotenv import load_dotenv
import json
import requests
import threading
import importlib.util

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install pybit ta pandas python-telegram-bot==13.15 requests python-dotenv

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
if sys.version_info.major == 3 and sys.version_info.minor >= 13:
    logging.warning("Python 3.13 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Python 3.12 –∏–ª–∏ –Ω–∏–∂–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: /opt/homebrew/bin/python3.12 -m venv venv")
    telegram_enabled = False
else:
    try:
        spec = importlib.util.find_spec("telegram.ext")
        if spec is None:
            logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë —Å –ø–æ–º–æ—â—å—é: pip install python-telegram-bot==13.15")
            telegram_enabled = False
        else:
            from telegram.ext import Updater, CommandHandler, MessageHandler, Filters  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–π
            telegram_enabled = True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telegram: {e}")
        telegram_enabled = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
TRADES_LOG_FILE = "trades_log.json"

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8012235659:AAEzFYu-WSRR4R28YNhIRm-6AXHVnCyyqxM"
TELEGRAM_CHAT_ID = "228860864"  # –¢–≤–æ–π Chat ID

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
api_key = os.getenv('BYBIT_API_KEY')
api_secret = os.getenv('BYBIT_API_SECRET')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–µ–π
if not api_key or not api_secret:
    logging.error("API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit testnet (REST API)
try:
    session = HTTP(
        testnet=True,
        api_key=api_key,
        api_secret=api_secret
    )
    logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit testnet (REST API)")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit REST API: {e}")
    exit(1)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
SYMBOL = "BTCUSDT"
LEVERAGE = 5
POSITION_SIZE = 0.001  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ BTC
STOP_LOSS_PCT = 0.005  # 0.5%
TAKE_PROFIT_PCT = 0.01  # 1%
MAX_LOSS_PCT = 0.05  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ 5%
UPDATE_INTERVAL = 60  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
initial_balance = 0
total_pnl = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
latest_indicators = {
    "rsi": None,
    "ema_fast": None,
    "ema_slow": None,
    "atr": None,
    "macd": None,
    "signal_line": None,
    "signal": None
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞
try:
    session.set_leverage(
        category="linear",
        symbol=SYMBOL,
        buyLeverage=str(LEVERAGE),
        sellLeverage=str(LEVERAGE)
    )
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ {LEVERAGE}x –¥–ª—è {SYMBOL}")
except Exception as e:
    if "110043" in str(e):
        logging.info(f"–ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–µ—á–∞: {e}")
        exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message
        }
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
def setup_telegram_bot():
    if telegram_enabled:
        try:
            updater = Updater(TELEGRAM_TOKEN, use_context=True)
            dispatcher = updater.dispatcher

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
            def start(update, context):
                update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è Kishambot! –Ø —Ç–æ—Ä–≥—É—é –Ω–∞ Bybit testnet. –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
            def status(update, context):
                if SELECTED_SYMBOL is None:
                    logging.info("–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è SELECTED_SYMBOL: None")
                    send_telegram_message("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n  –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
                    return
                if all(v is not None for v in latest_indicators.values()):
                    response = (
                        f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
                        f"RSI: {latest_indicators['rsi']:.2f}\n"
                        f"EMA12: {latest_indicators['ema_fast']:.2f}\n"
                        f"EMA26: {latest_indicators['ema_slow']:.2f}\n"
                        f"ATR: {latest_indicators['atr']:.2f}\n"
                        f"–°–∏–≥–Ω–∞–ª: {latest_indicators['signal'] if latest_indicators['signal'] else '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞'}"
                    )
                else:
                    response = "–î–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!"
                update.message.reply_text(response)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
            def unknown(update, context):
                update.message.reply_text("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –∏ /status. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö!")

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            dispatcher.add_handler(CommandHandler("start", start))
            dispatcher.add_handler(CommandHandler("status", status))
            dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, unknown))

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            updater.start_polling()
            logging.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥")
            updater.idle()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-–±–æ—Ç–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
def check_balance():
    try:
        balance_unified = session.get_wallet_balance(accountType="UNIFIED")
        logging.info(f"–û—Ç–≤–µ—Ç API –¥–ª—è UNIFIED: {balance_unified}")
        usdt_balance = _extract_usdt_balance(balance_unified)

        if usdt_balance == 0:
            balance_contract = session.get_wallet_balance(accountType="CONTRACT")
            logging.info(f"–û—Ç–≤–µ—Ç API –¥–ª—è CONTRACT: {balance_contract}")
            usdt_balance = _extract_usdt_balance(balance_contract)

        if usdt_balance == 0:
            logging.warning("USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Derivatives.")
        else:
            logging.info(f"–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT: {usdt_balance}")
        return usdt_balance
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def _extract_usdt_balance(balance_data):
    try:
        coins = balance_data.get('result', {}).get('list', [{}])[0].get('coin', [])
        for coin in coins:
            if coin.get('coin') == 'USDT':
                for key in ['availableBalance', 'availableToWithdraw', 'walletBalance', 'equity', 'free']:
                    if key in coin and coin[key]:
                        balance = float(coin[key])
                        logging.info(f"–ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å USDT –ø–æ –∫–ª—é—á—É {key}: {balance}")
                        return balance
                break
        return 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
def check_liquidity(current_price, qty):
    required_margin = (current_price * qty) / LEVERAGE
    current_balance = check_balance()
    if current_balance < required_margin * 1.1:
        logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required_margin}, –¥–æ—Å—Ç—É–ø–Ω–æ: {current_balance}")
        return False
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
def start_websocket(symbol=SYMBOL):
    try:
        ws = WebSocket(
            testnet=True,
            channel_type="linear"
        )
        
        def handle_ticker(data):
            try:
                price = float(data['data']['lastPrice'])
                logging.info(f"WebSocket: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price} USDT")
                print(f"WebSocket: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price} USDT")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–∞–Ω–Ω—ã—Ö: {e}")

        ws.ticker_stream(symbol=symbol, callback=handle_ticker)
        logging.info("WebSocket –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω")
        return ws
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
def get_klines(symbol=SYMBOL, interval=5, limit=100):
    try:
        klines = session.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        df = pd.DataFrame(
            klines['result']['list'],
            columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'turnover']
        )
        df['timestamp'] = pd.to_datetime(df['timestamp'].astype(float), unit='ms')
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = df[col].astype(float)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        return df
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ RSI, EMA –∏ ATR
def calculate_indicators(df):
    try:
        if len(df) < 26:
            logging.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return None, None, None, None, None, None
        rsi = RSIIndicator(close=df['close'], window=14).rsi()
        ema_fast = EMAIndicator(close=df['close'], window=12).ema_indicator()
        ema_slow = EMAIndicator(close=df['close'], window=26).ema_indicator()
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14).average_true_range()
        rsi_value = rsi.iloc[-1]
        ema_fast_value = ema_fast.iloc[-1]
        ema_slow_value = ema_slow.iloc[-1]
        atr_value = atr.iloc[-1]
        macd = MACD(close=df['close'], window_slow=26, window_fast=12, window_sign=9)
        macd_line = macd.macd()[-1]
        signal_line = macd.macd_signal()[-1]
        logging.info(f"RSI: {rsi_value:.2f}, EMA12: {ema_fast_value:.2f}, EMA26: {ema_slow_value:.2f}, ATR: {atr_value:.2f}")
        return rsi_value, ema_fast_value, ema_slow_value, atr_value, macd_line, signal_line
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return None, None, None, None, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
def generate_signal(rsi, ema_fast, ema_slow, atr):
    try:
        if any(v is None for v in [rsi, ema_fast, ema_slow, atr]):
            return None
        avg_atr = atr.mean()  # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR –∑–∞ –ø–µ—Ä–∏–æ–¥
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if rsi < 60 and ema_fast > ema_slow and atr > avg_atr * 0.5:
            return "Buy"
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        elif rsi > 60 and ema_fast < ema_slow and atr > avg_atr * 0.5:
            return "Sell"
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
def check_position(symbol=SYMBOL):
    try:
        position = session.get_positions(category="linear", symbol=symbol)
        position_info = position['result']['list'][0]
        qty = float(position_info['size'])
        side = position_info['side']
        entry_price = float(position_info['avgPrice']) if qty > 0 else 0
        return qty, side, entry_price
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return 0, None, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
def place_order(side, price, qty):
    try:
        order = session.place_order(
            category="linear",
            symbol=SYMBOL,
            side=side,
            orderType="Market",
            qty=qty,
            stopLoss=str(price * (1 - STOP_LOSS_PCT if side == "Buy" else 1 + STOP_LOSS_PCT)),
            takeProfit=str(price * (1 + TAKE_PROFIT_PCT if side == "Buy" else 1 - TAKE_PROFIT_PCT))
        )
        logging.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {side}, —Ü–µ–Ω–∞: {price}, –æ–±—ä–µ–º: {qty}")
        send_telegram_message(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {side} {SYMBOL} @ {price}, –æ–±—ä–µ–º: {qty}")
        log_trade("open", side, price, qty, status="executed")
        return order
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
def close_position(side, qty, current_price, initial_price):
    try:
        close_side = "Sell" if side == "Buy" else "Buy"
        session.place_order(
            category="linear",
            symbol=SYMBOL,
            side=close_side,
            orderType="Market",
            qty=qty
        )
        logging.info(f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {close_side}, —Ü–µ–Ω–∞: {current_price}, –æ–±—ä–µ–º: {qty}")
        send_telegram_message(f"üìâ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {close_side} {SYMBOL} @ {current_price}, –æ–±—ä–µ–º: {qty}")
        log_trade("close", close_side, current_price, qty, status="closed")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
def log_trade(action, side, price, qty, status="executed"):
    trade = {
        "timestamp": str(pd.Timestamp.now()),
        "action": action,
        "side": side,
        "price": price,
        "qty": qty,
        "status": status,
        "symbol": SYMBOL,
        "pnl": 0.0 if action == "open" else (price - initial_price) * qty if side == "Buy" else (initial_price - price) * qty
    }
    try:
        with open(TRADES_LOG_FILE, 'a') as f:
            f.write(json.dumps(trade) + "\n")
        logging.info(f"–°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {trade}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Å–¥–µ–ª–æ–∫: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def trading_loop():
    global initial_balance, total_pnl, latest_indicators
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    initial_balance = check_balance()
    if initial_balance < POSITION_SIZE * 10000:
        logging.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ USDT –Ω–∞ testnet –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤ Derivatives.")
        return

    # –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    ws = start_websocket()
    if not ws:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å WebSocket")
        return

    last_update = 0
    try:
        while True:
            current_time = time.time()
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ UPDATE_INTERVAL —Å–µ–∫—É–Ω–¥
            if current_time - last_update >= UPDATE_INTERVAL:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
                df = get_klines()
                if df is not None:
                    print("\n5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
                    print(df.tail(5))
                    # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    rsi, ema_fast, ema_slow, atr, macd_line, signal_line = calculate_indicators(df)
                    if all(v is not None for v in [rsi, ema_fast, ema_slow, atr, macd_line, signal_line]):
                        print(f"\n–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏:")
                        print(f"RSI: {rsi:.2f}")
                        print(f"EMA12: {ema_fast:.2f}")
                        print(f"EMA26: {ema_slow:.2f}")
                        print(f"ATR: {atr:.2f}")
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status
                        latest_indicators["rsi"] = rsi
                        latest_indicators["ema_fast"] = ema_fast
                        latest_indicators["ema_slow"] = ema_slow
                        latest_indicators["atr"] = atr
                        latest_indicators["macd"] = macd_line
                        latest_indicators["signal_line"] = signal_line
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
                        signal = generate_signal(rsi, ema_fast, ema_slow, atr)
                        latest_indicators["signal"] = signal
                        print(f"–°–∏–≥–Ω–∞–ª: {signal if signal else '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞'}")

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                        position_qty, position_side, entry_price = check_position()
                        current_price = float(session.get_tickers(category="linear", symbol=SYMBOL)['result']['list'][0]['lastPrice'])

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±—ã—Ç–∫–æ–≤
                        if position_qty > 0:
                            unrealized_pnl = (current_price - entry_price) * position_qty if position_side == "Buy" else (entry_price - current_price) * position_qty
                            total_pnl += unrealized_pnl
                            if total_pnl < 0 and abs(total_pnl) > initial_balance * MAX_LOSS_PCT:
                                logging.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ {MAX_LOSS_PCT*100}%: {abs(total_pnl)} USDT")
                                close_position(position_side, position_qty, current_price, entry_price)
                                send_telegram_message(f"‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ {abs(total_pnl)} USDT")
                                break

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                            if position_side == "Buy":
                                if current_price <= entry_price * (1 - STOP_LOSS_PCT) or current_price >= entry_price * (1 + TAKE_PROFIT_PCT):
                                    close_position(position_side, position_qty, current_price, entry_price)
                            else:  # Sell
                                if current_price >= entry_price * (1 + STOP_LOSS_PCT) or current_price <= entry_price * (1 - TAKE_PROFIT_PCT):
                                    close_position(position_side, position_qty, current_price, entry_price)

                        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
                        if signal and position_qty == 0:
                            if check_liquidity(current_price, POSITION_SIZE):
                                place_order(signal, current_price, POSITION_SIZE)
                            else:
                                print("–û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                        else:
                            print("–û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è")
                    else:
                        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏")
                last_update = current_time

            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        ws.exit()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if telegram_enabled:
        telegram_thread = threading.Thread(target=setup_telegram_bot)
        telegram_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π
        telegram_thread.start()

    # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    trading_loop()

if __name__ == "__main__":
    main()